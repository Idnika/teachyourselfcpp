20191106



p.273

A stream is a logical device that either produces or consumes information.

When a C++ program begins, these four streams are automatically opened:

cin		Standard input			Keyboard
cout		Standard output		Screen
cerr		Standard error			Screen
clog		Buffered version of cerr	Screen



p.274

The I/O classes begin with a system of template classes.
a template class defines the form of a class without fully specifying the data upon which it will operate.
Once a template class has been defined, specific instances of it can be created.

The C++ I/O system is built upon two related, but different, template class hierarchies. The first is derived from the low-level I/O class called basic_streambuf. This class supplies the basic, low-level input and output operations and provides the underlying support for the entire C++ I/O system.

The class hierarchy that you will most commonly be working with is derived from basic_ios.
This is a high-level I/O class that provides formatting, error-checking, and status information related to stream I/O.


p.346

Polymorphism is supported by C++ in two ways.
First, it is supported at compile time, through the use of overloaded operators and functions.
Second, it is supported at run time, through the use of virtual functions.

p.347

A pointer declared as a pointer to a base class can also be used to point to any class derived from that base.


base *p;

base base_ob;
derived derived_ob;

p = &baes_ob;

p = &derived_ob;\



a base pointer can point to an object of any class derived from that base without generating a type mismatch error.

Although you can use a base pointer to point to a derived object, you can access only those members of the derived object that were inherited from the base.
This is because the base pointer has knowledge only of the base class. It knows nothing about the members added by the derived class.

And a pointer of the derived type cannot be used to access an object of the base class.


A virtual function is a member function that is declared within a base class and redefined by a derived class. To create a virtual function, precede the function’s declaration with the keyword virtual. When a class containing a virtual function is inherited, the derived class redefines the virtual function relative to the derived class.
In essence, virtual functions implement the “one interface, multiple methods” philosophy that underlies polymorphism. The virtual function within the base class defines the form of the interface to that function. Each redefinition of the virtual function by a derived class implements its operation as it relates specifically to the derived class. That is, the redefinition creates a specific method. When a virtual function is redefined by a derived class, the keyword virtual is not needed.

A virtual function can be called just like any other member function. However, what makes a virtual function interesting-and capable of supporting run-time polymorphism-is what happens when a virtual function is called through a pointer. ~ C++ determines which version of that function will be executed based upon the type of object being pointed to by the pointer. And, this determination is made at run time. Put differently, it is the type of the object pointed to at the time when the call occurs that determines which version of the virtual function will be executed. 

p.351

First, an overloaded function must differ in type and/ or number of parameters, while a redefined virtual function must have precisely the same type and number of parameters and the same return type. (In fact, if you change either the number or type of parameters when redefining a virtual function, it simply becomes an overloaded function and its virtual nature is lost.) Further, virtual functions must be class members. This is not the case for overloaded functions. Also, while destructor functions can be virtual, constructors cannot. Because of the difference between overloaded function and redefined virtual functions, the term overriding is used to describe virtual function redefinition.


20191107



p.352


The key points to understand from the preceding example are that the type of the object being pointed to determines which version of an overridden virtual function will be executed when accessed via a base class pointer, and that this decision is made at run time.

derived에서 base의 virtual function이 오버라이딩 되어있지 않으면 그냥 base function 갖다 씀


20191108



p.358
When there is no meaningful action for a base class virtual function to perform, the implication is that any derived class must override this function.
To ensure that this will occur, C++ supports pure virtual functions.

virtual type func_name(parameter-list) = 0;

When a virtual function is made pure, it forces any derived class to override it.
If a derived class does not, a compile-time error results.

When a class contains at least one pure virtual function, it is referred to as an abstract class. Since an abstract class contains at least one function for which no body exists, it is, technically, an incomplete type, and no objects of that class can be created.
Thus, abstract classes exist only to be inherited.

you can still create a pointer to an abstract class, since it is through the use of base class pointers that run-time polymorphism is achieved.

(it is also permissible to have a reference to an abstract class)



This means that when a derived class inherits a virtual function from a base class and then the derived class is used as a base for yet another derived class, the virtual function can be overridden by the final derived class (as well as the first derived class). 
p.362
Polymorphism is the process by which a common interface is applied to two or more similar(but technically different) situations, thus implementing the “one interface, multiple methods” philosophy.
Polymorphism is important because it can greatly simplify complex systems.

Early binding and Late binding

Early binding essentially refers to those events that can be known at compile time. Specifically, it refers to those function calls that can be resolved during compilation. Early bound entities include “normal” functions, overloaded functions, and nonvirtual member and friend functions.
When these types of functions are compiled, all address information necessary to call them is known at compile time.
The main advantage of early binding is that it is very efficient.
The main disadvantage is lack of flexibility.

Late binding refers to events that must occur at run time. A late bound function call is one in which the address of the function to be called is not known until the program runs.

20191109



p.380
generic class를 쓰면 동일한 메커니즘 / 알고리즘을 쓰는 뭐...연결 리스트라던가, 큐라던가 하는 형태를 type에 상관없이 손쉽게 쓸 수 있음.

template <class Ttype> class class-name { }

Here Ttype is the placeholder type name that will be specified when a class is initiated. If necessary, you can define more than one generic data type by using a comma-seperated list.

Once you have created a generic class, you create a specific instance of that class by using the following general form:

class-name <type> ob;


