20191106



p.273

A stream is a logical device that either produces or consumes information.

When a C++ program begins, these four streams are automatically opened:

cin		Standard input			Keyboard
cout		Standard output		Screen
cerr		Standard error			Screen
clog		Buffered version of cerr	Screen



p.274

The I/O classes begin with a system of template classes.
a template class defines the form of a class without fully specifying the data upon which it will operate.
Once a template class has been defined, specific instances of it can be created.

The C++ I/O system is built upon two related, but different, template class hierarchies. The first is derived from the low-level I/O class called basic_streambuf. This class supplies the basic, low-level input and output operations and provides the underlying support for the entire C++ I/O system.

The class hierarchy that you will most commonly be working with is derived from basic_ios.
This is a high-level I/O class that provides formatting, error-checking, and status information related to stream I/O.


p.346

Polymorphism is supported by C++ in two ways.
First, it is supported at compile time, through the use of overloaded operators and functions.
Second, it is supported at run time, through the use of virtual functions.

p.347

A pointer declared as a pointer to a base class can also be used to point to any class derived from that base.


base *p;

base base_ob;
derived derived_ob;

p = &baes_ob;

p = &derived_ob;\



a base pointer can point to an object of any class derived from that base without generating a type mismatch error.

Although you can use a base pointer to point to a derived object, you can access only those members of the derived object that were inherited from the base.
This is because the base pointer has knowledge only of the base class. It knows nothing about the members added by the derived class.

And a pointer of the derived type cannot be used to access an object of the base class.


A virtual function is a member function that is declared within a base class and redefined by a derived class. To create a virtual function, precede the function’s declaration with the keyword virtual. When a class containing a virtual function is inherited, the derived class redefines the virtual function relative to the derived class.
In essence, virtual functions implement the “one interface, multiple methods” philosophy that underlies polymorphism. The virtual function within the base class defines the form of the interface to that function. Each redefinition of the virtual function by a derived class implements its operation as it relates specifically to the derived class. That is, the redefinition creates a specific method. When a virtual function is redefined by a derived class, the keyword virtual is not needed.

A virtual function can be called just like any other member function. However, what makes a virtual function interesting-and capable of supporting run-time polymorphism-is what happens when a virtual function is called through a pointer. ~ C++ determines which version of that function will be executed based upon the type of object being pointed to by the pointer. And, this determination is made at run time. Put differently, it is the type of the object pointed to at the time when the call occurs that determines which version of the virtual function will be executed. 

p.351

First, an overloaded function must differ in type and/ or number of parameters, while a redefined virtual function must have precisely the same type and number of parameters and the same return type. (In fact, if you change either the number or type of parameters when redefining a virtual function, it simply becomes an overloaded function and its virtual nature is lost.) Further, virtual functions must be class members. This is not the case for overloaded functions. Also, while destructor functions can be virtual, constructors cannot. Because of the difference between overloaded function and redefined virtual functions, the term overriding is used to describe virtual function redefinition.


20191107



p.352


The key points to understand from the preceding example are that the type of the object being pointed to determines which version of an overridden virtual function will be executed when accessed via a base class pointer, and that this decision is made at run time.

derived에서 base의 virtual function이 오버라이딩 되어있지 않으면 그냥 base function 갖다 씀


20191108



p.358
When there is no meaningful action for a base class virtual function to perform, the implication is that any derived class must override this function.
To ensure that this will occur, C++ supports pure virtual functions.

virtual type func_name(parameter-list) = 0;

When a virtual function is made pure, it forces any derived class to override it.
If a derived class does not, a compile-time error results.

When a class contains at least one pure virtual function, it is referred to as an abstract class. Since an abstract class contains at least one function for which no body exists, it is, technically, an incomplete type, and no objects of that class can be created.
Thus, abstract classes exist only to be inherited.

you can still create a pointer to an abstract class, since it is through the use of base class pointers that run-time polymorphism is achieved.

(it is also permissible to have a reference to an abstract class)



This means that when a derived class inherits a virtual function from a base class and then the derived class is used as a base for yet another derived class, the virtual function can be overridden by the final derived class (as well as the first derived class). 
p.362
Polymorphism is the process by which a common interface is applied to two or more similar(but technically different) situations, thus implementing the “one interface, multiple methods” philosophy.
Polymorphism is important because it can greatly simplify complex systems.

Early binding and Late binding

Early binding essentially refers to those events that can be known at compile time. Specifically, it refers to those function calls that can be resolved during compilation. Early bound entities include “normal” functions, overloaded functions, and nonvirtual member and friend functions.
When these types of functions are compiled, all address information necessary to call them is known at compile time.
The main advantage of early binding is that it is very efficient.
The main disadvantage is lack of flexibility.

Late binding refers to events that must occur at run time. A late bound function call is one in which the address of the function to be called is not known until the program runs.

20191109



p.380
generic class를 쓰면 동일한 메커니즘 / 알고리즘을 쓰는 뭐...연결 리스트라던가, 큐라던가 하는 형태를 type에 상관없이 손쉽게 쓸 수 있음.

template <class Ttype> class class-name { }

Here Ttype is the placeholder type name that will be specified when a class is initiated. If necessary, you can define more than one generic data type by using a comma-seperated list.

Once you have created a generic class, you create a specific instance of that class by using the following general form:

class-name <type> ob;


20191113



One very good use for catch(...) is as the last catch of a cluster of catches.
In this capacity it provides a useful default or “catch all” statement.


#include <iostream>
using namespace std;
 
void Xhandler(int test) throw(int, char, double)
{
 if(test == 0) throw test;
 if(test == 1) throw 'a';
 if(test == 2) throw 123.23;
}
 
int main()
{
 cout << "start" << endl;
 
 try {
   Xhandler(0);
 } catch(int i) {
   cout << "Caught int" << endl;
 } catch(char c) {
   cout << "Caught char" << endl;
 } catch(double d) {
   cout << "Caught double" << endl;
 }
 
 cout << "end";
 
 return 0;
}

In this program, the function Xhandler() can throw only integer, character, and double exceptions.
p.399

As you have learned, you can rethrow an exception. The most likely reason for doing so is to allow multiple handlers access to the exception.
For example, perhaps one exception handler manages one aspect of an exception and a second handler copes with another.
An exception can only be rethrown from within a catch block(or from any function called from within that block). 
When you rethrow an exception, it will not be recaught by the same catch statement.

p.401
Finally, it was decided that a new failure will generate an exception by default, but that a null pointer could be returned instead, as an option.

In standard C++, when an allocation request cannot be honored, new throws a bad-alloc exception. … To have access to this exception, you must include the header <new> in your program.



In Standard C++ it is also possible to have new return null instead of throwing an exception when an allocation failure occurs. This form of new is most useful when you are compiling older code with a modern C++ compiler.

p_var = new(northrow) type;


20191114



p.412
When typeid is applied to a reference to a polymorphic base class, the type returned is that of the actual object being referred to.
The circumstance in which you will most often make use of this feature is when objects are passed to functions by reference.

#include <iostream>
#include <typeinfo>
using namespace std;
 
class BaseClass {
 virtual void f() {};
};
 
class Derived1 : public BaseClass {
 
};
 
class Derived2 : public BaseClass {
 
};
 
void WhatType(BaseClass &ob)
{
 cout << "ob is referencing an object of type ";
 cout << typeid(ob).name() << endl;
}
 
int main()
{
 int i;
 BaseClass baseob;
 Derived1 ob1;
 Derived2 ob2;
 
 WhatType(baseob);
 WhatType(ob1);
 WhatType(ob2);
 
 return 0;
}


Output :::
ob is referencing an object of type 9BaseClass
ob is referencing an object of type 8Derived1
ob is referencing an object of type 8Derived2
Often all you need to know is whether the type of one object matches that of another.
Since the type_info object returned by typeid overloads the == and != operators, this too is easy to accomplish.

#include <iostream>
#include <typeinfo>
using namespace std;
 
class X {
 virtual void f() {}
};
 
class Y {
 virtual void f() {}
};
 
int main()
{
 X x1, x2;
 Y y1;
 
 if(typeid(x1) == typeid(x2))
   cout << "x1 and x2 are some types" << endl;
 else
   cout << "x1 and x2 are different types" << endl;
 
 if(typeid(x1) != typeid(y1)) cout << "x1 and y1 are different types" << endl;
 else cout << "x1 and y1 are same types" << endl;
 
 return 0;
}

p.414

The program defines a simple class hierarchy that draws shapes on the screen.
Since objects are generated randomly, there is no way to know in advance what type of object will be created next.




p.417

The typeid operator can be applied to template classes.




p.420

Although C++ still fully supports the traditional casting operator defined by C, C++ adds four new ones. They are dynamic_cast, const_cast, reinterpret_cast, and static_cast. 
The dynamic_cast operator performs a run-time cast that verifies the validity of a cast.
If, at the time dynamic_cast is executed, the cast is invalid, the cast fails.

dynamic_cast<target-type> (expr)

The target type must be a pointer or reference type, and the expression being cast must evaluate to a pointer or reference.

Thus, dynamic_cast can be used to cast one type of pointer into another or one type of reference into another.

The purpose of dynamic_cast is to perform casts on polymorphic types.
Given the two polymorphic classes B and D, with D derived from B, a dynamic_cast can always cast a D* pointer into an B* pointer. This is because a base pointer can always point to a derived pointer.
But a dynamic_cast can cast a B* pointer into an D* pointer only if the object being pointed to actually is a D object.
// 이게 대체 뭔 뜻이야
D -(inherit)-> B임?
이건 봐야 알겠는데


In general, dynamic_cast will succeed if the pointer(or reference) being cast is a pointer(or reference) to either an object of the target type or an object derived from the target type.
Otherwise, the cast will fail.
If the cast fails, dynamic_cast evaluates to null if the cast involves pointer.
If a dynamic_cast on reference types fails, a bad_cast exception is thrown.
20191115



p.422

컴파일한 결과는 다음과 같으며 당연히 기초클래스의 객체를 가리킨 유도클래스의 포인터 변수는
유도클래스의 멤버함수인 freightWeight 값을 가지고 있지 않기 때문에 쓰레기값이 출력되는 것이다.
애초에 이러한 캐스팅은 말이 안되는 것인데 그 이유는 유도클래스의 객체를 생성하지도 않았는데,
유도클래스의 포인터 변수로 기초클래스의 객체를 가리키는 것이 아무 의미가 없기 때문이다.
따라서 이 코드는 보지 않고 그 위의 다운캐스팅을 보기로 한다.

다운캐스팅은 보통 쓰이지 않는데, 그 이유는 업캐스팅된 포인터변수를 다시 다운 캐스팅하면 원래대로 돌아오는 것과
다를게 없기 때문이다. 따라서 dynamic_cast를 통해서 이런 점을 제어할 수 있다.
메인함수만 수정해서 이 연산자를 확인해보도록 하자.

1
2
3
4
5
6
7
8
9
10
11
12
13
14
int main(void)
{
    Car *pcar1 = new Truck(80, 200);
    Truck *ptruck1 = dynamic_cast<Truck*>(pcar1); // 다운캐스팅 : 컴파일에러
    ptruck1->ShowTruckState();
 
    std::cout << std::endl;
 
    Truck *ptruck2 = new Truck(90, 300);
    Car *pcar2 = dynamic_cast<Car*>(ptruck2); // 업캐스팅 : 컴파일성공
 
 
    return 0;
}
Colored by Color Scripter
cs

위 코드를 통해 dynamic_cast는 업캐스팅은 허용하지만 다운캐스팅은 허용하지 않는다는 것을 알 수 있다.
그렇지만 dynamic_cast로 다운캐스팅을 허용하는 방법이 있는데 바로 기초클래스가 polymorphic class 인 경우이다.
다형성이 적용된 클래스로 하나 이상의 가상함수(virtual function)을 가지는 클래스를 말한다.
이는 RTTI(Runtime Type Information)를 가지기 때문에 다운캐스팅을 할 수 있는 것이다.
 RTTI는 런타임시 캐스팅하는 dynamic_cast에게 객체의 정보를 제공해주는 것을 말한다. 
다운캐스팅 할 때 이 위의 코드 처럼  pcar1에 할당된 객체의 주소가 기초클래스의 것이었다면 쓰레기값이 도출되므로
굉장히 위험한 코드이다. 따라서 RTTI를 통해 dynamic_cast를 사용할 수 있는 것이다.

꽤 복잡하고 이해하기가 어렵다. 아직 dynamic_cast가 런타임시 동작하는 원리나 RTTI에 대해 정확히는 모르겠다.
어쨌든 polymorphic class에서만 dynamic_cast를 통한 다운캐스팅이 허용된다는 것 정도를 일단 알아두자.
다음 링크들을 통해서 dynamic_cast의 속도 저하 문제와 RTTI에 대해서 확인할 수 있다.



https://sexycoder.tistory.com/15
(casting 에 관하여)
p.429

In general, these casting operators provide a safer, more explicit means of performing certain type conversions than that provided by the C-style cast.

The const-cast operator is used to explicitly override const and/ or volatile in a cast.
20191120



The const-cast operator is used to explicitly override const and/or volatile in a cast.
The most common use of const-cast is to remove const-ness.

The static-cast operator performs a non-polymorphic cast.

The re-interpret_cast operator changes one pointer type into another, funcamentally different, pointer type. (like pointer to integer, integer to pinter.)

A reinterpret_cast should be used for casting inherently incompatible pointer types.



p.437
The purpose of the namespace is to localize the names of identifiers to avoid name collisions.

p.438
Identifier declared within a namespace can be referred to directly within that namespace. ~ However, since namespace defines a scope, you need to use the scope resolution operator to refer to objects declared within a namespace from outside that namespace. For example, to assign the value 10 to i from code outside MyNameSpace, you must use this statement:

MyNamesSpace::i = 10;

Or, to declare an object of type myclass from outside MyNameSpace, you use a statement like this:

MyNameSpace::myclass ob;

~

As you can imagine, if your program includes frequent references to the members of a namespace, the need to specify the namespace and the scope resolution operator each time you need to refer to one quickly becomes a tedious chore.
20191121


p.455

Class member functions can be declared as const. When this is done, that function cannot modify the object that invokes it. Also, a const object cannot invoke a non-const member function.

However, a const member function can be called by either const or non-const objects.

Sometimes there will be one or more members of a class that you want a const function to be able to modify even though you don’t want the function to be able to modify any of its other members.
You can accomplish this through the use of mutable, which overrides const-ness.

This is, a mutable member can be modified by a const member function.




#include <iostream>
using namespace std;
 
class Demo {
 int i;
public:
 int geti() const {
   return i;
 }
 void seti(int x) const {
   i = x;
 }
}


p.457

This program wil not compile because seti() is declared as const. This means that it is not allowed to modify the invoking object.
Since it attemps to change i, the program is in error.


p.460
The reason for this is that whenever you create a constructor that takes one argument, you are also implicitly creating a conversion from the type of that argument to the type of the class.

If you do not want implicit conversions to be made, you can prevent them by using explicit.
The explicit specifier applies only to constructors.



p.461

The automatic conversion from the type of a constructor’s first argument into a call to the constructor itelf has interesting implications.

p.463

C++ provides two important mechanisms that make it easier to link C++ to other languages.
One is the linkage specifier, which tells the compiler that one or more functions in your C++ program will be linked with another language that might have a different approach to naming, parameter passing, stack restoration, and the like.

The scond is the asm keyword, which allows you to embed assembly language instructions in your C++ source code.




463~465 나중에 필요할 때




p.466

In addition to console and file I/O, C++ supports a full set of functions that use character arrays as the input or output device.
Although C++’s array-based I/O parallels, in concept, the array-based I/O found in C, C++’s array-based I/O is more flexible and useful because it allows user-defined types to be integrated to into it.



p.474

The STL was not part of the original specifiaction for C++ but was added during the standardization proceedings.

